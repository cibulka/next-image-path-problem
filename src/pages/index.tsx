import React, { useState } from 'react';
import type { GetStaticProps, NextPage } from 'next';
import axios from 'axios';
import Head from 'next/head';
import Image from 'next/future/image';

import getPostOnServer from 'src/helpers/getPostOnServer';
import styles from 'src/styles/Home.module.css';
import { BlogPost } from 'src/types';
import getReadMe from 'src/helpers/getReadMe';
import { MDXRemote } from 'next-mdx-remote';

const Home: NextPage<{ post: BlogPost; readMe: any }> = (props) => {
  const [error, setError] = useState<undefined | unknown>(undefined);
  const [posts, setPosts] = useState<BlogPost[]>([props.post]);
  const [isLoading, setIsLoading] = useState(false);
  const [index, setIndex] = useState(0);

  function loadMore() {
    const newIndex = index + 1;
    setIsLoading(true);
    setIndex(newIndex);
    axios
      .get<BlogPost>(`/api/blog?index=${newIndex}`)
      .then((data) => {
        setPosts((old) => [...old, data.data]);
      })
      .catch((err) => {
        console.error(err);
        setError(err);
      })
      .finally(() => setIsLoading(false));
  }

  const title = `How to load image size on Next.js's API endpoint (hosted on Vercel)`;

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>{title}</h1>

        <div className={styles.text}>
          <MDXRemote {...props.readMe} />
        </div>

        {posts.length === 0 ? (
          <div>No posts found</div>
        ) : (
          <>
            <ul>
              {posts.map((post, i) => {
                const paddingBottom = ((post.height || 9) / (post.width || 16)) * 100;
                return (
                  <li key={i} className={styles.article}>
                    <h2>{post.title}</h2>
                    <h3>Image size</h3>
                    {post.width && post.height ? (
                      <>
                        <div>
                          <strong>Width</strong>: {post.width}
                        </div>
                        <div>
                          <strong>Height</strong>: {post.height}
                        </div>
                      </>
                    ) : (
                      <div>Error! No image dimmensions, falling back to 16x9 ratio.</div>
                    )}
                    <div className={styles.postImage}>
                      <Image src={post.image} fill sizes="20em" alt="" />
                      <div style={{ paddingBottom: `${paddingBottom}%` }} />
                    </div>
                  </li>
                );
              })}
            </ul>
            {isLoading ? (
              <div>Loading ...</div>
            ) : index < 1 ? (
              <button type="button" onClick={() => loadMore()}>
                Load more
              </button>
            ) : (
              'All loaded'
            )}
          </>
        )}
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  const post = getPostOnServer(0);
  const readMe = await getReadMe();

  return {
    props: { post, readMe },
  };
};

export default Home;
